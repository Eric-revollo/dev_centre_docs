[{
    "name": "beforeRender",
    "shortDescription": "Triggers just before a chart is rendered.",
    "description": "This event is fired just before a chart is rendered.",
    "info": "Calling `event.preventDefault()` from within the handler of this event will cancel the rendering process. The rendering process is triggered when the `FusionCharts#render()` method is called.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-beforeRender",
      "_renderBtn": true


    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": " {\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"beforeRender\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.container",
          "type": "DOMElement",
          "description": "HTML DOM element within which the chart will be rendered"
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width"
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height"
        }
      ]
    }]
  },

  {
    "name": "renderComplete",
    "shortDescription": "Triggers when a chart is rendered using `FusionCharts#render()` method, the `FusionCharts#chartType()` method, or the `FusionCharts#setChartData()` method.",
    "description": "This event is fired every time a chart is rendered using the `FusionCharts#render()` method, the `FusionCharts#chartType()` method, or the `FusionCharts#setChartData()` method. It is also triggered every time chart data is successfully updated, which triggers a re-render internally.",
    "info": "The difference between this event and the rendered event is that the rendered event is triggered only when the FusionCharts#render() method is called.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-renderComplete"

    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"renderComplete\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when eventObj.detachHandler() is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width"
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height"
        },
        {
          "name": "data.drawCount",
          "type": "number",
          "description": "number of times the chart is drawn/redrawn"
        },
        {
          "name": "data.displayingMessage",
          "type": "boolean",
          "description": "Boolean attribute indicating whether a message is configured for the chart"
        }
      ]
    }]
  },

  {
    "name": "renderCancelled",
    "shortDescription": "Triggers when the default behavior of the `beforeRender` event is cancelled using the `event.preventDefault()` from within the handler for the `beforeRender` event.",
    "description": "This event is fired when the default behavior of the `beforeRender` event is cancelled using the `event.preventDefault()` from within the handler for the `beforeRender` event.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-renderCancelled"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"renderCancelled\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.container",
          "type": "DOMElement",
          "description": "DOM element used to render the chart"
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width"
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height"
        }
      ]
    }]
  },

  {
    "name": "rendered",
    "shortDescription": "Triggers when the chart completes drawing, after the `FusionCharts#render()` or the `FusionCharts#chartType()` method is called.",
    "description": "The event is fired when the chart completes drawing, after the `FusionCharts#render()` or the `FusionCharts#chartType()` method is called. The chart renders if the data provided is correct; otherwise, an error message is rendered.A call to this event is made only once, even if new data may be supplied later. It can be used to invoke any further JavaScript methods on the chart or to change chart data.",
    "info": "If chart animation is enabled, this event is triggered before the animation process. In case you need to perform any action after the animation has completed, you will need to add an appropriate time delay in this event handler, for example, by using `setTimeout`.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-rendered"

    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"rendered\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },

  {
    "name": "noDataToDisplay",
    "shortDescription": "Triggers when no data is passed to the chart.",
    "description": "The event is fired when no data is passed to the chart. It can be used to show an error message or take a corrective measure.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-nodatatodisplay"

    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"noDataToDisplay\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },

  {
    "name": "beforeDataUpdate",
    "shortDescription": "Triggers just before chart data is passed to the chart. ",
    "description": "This event is fired just before chart data is passed to the chart. It is useful if any operations have to be performed on the data before it is applied to the chart.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-beforedataupdate"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"beforeDataUpdate\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.data",
          "type": "string or object",
          "description": "Chart data, in the [data format]dataFormats used"
        },
        {
          "name": "data.format",
          "type": "FusionCharts~dataFormats",
          "description": "Format in which chart data is finally passed to the chart"
        },
        {
          "name": "data.dataSource",
          "type": "object",
          "description": "Object containing the source data for the chart"
        },
        {
          "name": "data.dataFormat",
          "type": "FusionCharts~dataFormats",
          "description": "Format of the source data"
        },
        {
          "name": "data.silent",
          "type": "boolean",
          "description": "true if silent instructions are saved to arguments"
        }
      ]
    }]
  },

  {
    "name": "dataUpdateCancelled",
    "shortDescription": "Triggers when the default behavior of the `beforeDataUpdate` event is cancelled by calling `event.preventDefault()` from within the handler for `beforeDataUpdate`.",
    "description": "This event is fired when the default behavior of the `beforeDataUpdate` event is cancelled by calling `event.preventDefault()` from within the handler for `beforeDataUpdate`.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"dataUpdateCancelled\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.data",
          "type": "string or object",
          "description": "Chart data, in the [data format]dataFormats used"
        },
        {
          "name": "data.format",
          "type": "FusionCharts~dataFormats",
          "description": "Format in which chart data is finally passed to the chart"
        },
        {
          "name": "data.dataSource",
          "type": "object",
          "description": "Object containing the source data for the chart"
        },
        {
          "name": "data.dataFormat",
          "type": "FusionCharts~dataFormats",
          "description": "Format of the source data"
        },
        {
          "name": "data.error",
          "type": "object",
          "description": "Error object passed to the event for debugging the JavaScript errors encountered"
        }
      ]
    }]
  },

  {
    "name": "dataUpdated",
    "shortDescription": "Triggers when chart data is updated and the chart is redrawn, after the `drawComplete` event.",
    "description": "The event is fired when chart data is updated and the chart is redrawn, after the drawComplete event.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"dataUpdated\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.data",
          "type": "string or object",
          "description": "Chart data, in the [data format]dataFormats used"
        },
        {
          "name": "data.format",
          "type": "FusionCharts~dataFormats",
          "description": "Format in which chart data is finally passed to the chart"
        },
        {
          "name": "data.dataSource",
          "type": "object",
          "description": "Object containing the source data for the chart"
        },
        {
          "name": "data.dataFormat",
          "type": "FusionCharts~dataFormats",
          "description": "Format of the source data"
        },
        {
          "name": "data.silent",
          "type": "boolean",
          "description": "true if silent instructions are saved to arguments"
        }
      ]
    }]
  },

  {
    "name": "chartMouseMove",
    "shortDescription": "Triggers when the mouse pointer is moved over the chart.",
    "description": "This event is fired when the mouse pointer is moved over the chart. The event arguments pass useful information related to pointer location, relative to the chart and the page, that can be used for positioning elements like annotations or integrating charts with custom tooltip libraries.",
    "info": "By default, a FusionCharts chart does not trigger this event until is enabled to do so. To enable this event for a chart, set the `enableChartMouseMoveEvent` attribute to 1.",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "Hover",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"chartMouseMove\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.chartX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.chartY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width, in pixels or percentage"
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height, in pixels or percentage"
        },
        {
          "name": "data.container",
          "type": "DOMElement",
          "description": "DOM element used to render the chart"
        },
        {
          "name": "data.pixelWidth",
          "type": "number",
          "description": "Width of the DOM element, in pixels, used to render the chart"
        },
        {
          "name": "data.pixelHeight",
          "type": "number",
          "description": "Height of the DOM element, in pixels, used to render the chart"
        },
        {
          "name": "data.id",
          "type": "string",
          "description": "Chart ID"
        }
      ]
    }]
  },

  {
    "name": "chartRollOver",
    "shortDescription": "Triggers every time the mouse pointer is rolled over the chart.",
    "description": "This event is fired every time the mouse pointer is rolled over the chart.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-chartRollOver"
    },
    "tags": {
      "action": "Hover",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"chartRollOver\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.chartX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.chartY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width, in pixels or percentage"
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height, in pixels or percentage"
        },
        {
          "name": "data.container",
          "type": "DOMElement",
          "description": "DOM element used to render the chart"
        },
        {
          "name": "data.pixelWidth",
          "type": "number",
          "description": "Width of the DOM element, in pixels, used to render the chart"
        },
        {
          "name": "data.pixelHeight",
          "type": "number",
          "description": "Height of the DOM element, in pixels, used to render the chart"
        },
        {
          "name": "data.id",
          "type": "string",
          "description": "Chart ID"
        }
      ]
    }]
  },

  {
    "name": "chartRollOut",
    "shortDescription": "Triggers every time the mouse pointer is rolled out from the chart.",
    "description": "This event is fired every time the mouse pointer is rolled out from the chart.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-chartRollOut"
    },
    "tags": {
      "action": "Hover",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"chartRollOut\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.chartX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.chartY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width, in pixels or percentage"
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height, in pixels or percentage"
        },
        {
          "name": "data.container",
          "type": "DOMElement",
          "description": "DOM element used to render the chart"
        },
        {
          "name": "data.pixelWidth",
          "type": "number",
          "description": "Width of the DOM element, in pixels, used to render the chart"
        },
        {
          "name": "data.pixelHeight",
          "type": "number",
          "description": "Height of the DOM element, in pixels, used to render the chart"
        },
        {
          "name": "data.id",
          "type": "string",
          "description": "Chart ID"
        }
      ]
    }]
  },

  {
    "name": "chartClick",
    "shortDescription": "Triggers every time the chart is clicked.",
    "description": "This event is fired every time the chart is clicked.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-chartClick"
    },
    "tags": {
      "action": "Click",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"chartClick\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.chartX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.chartY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width, in pixels or percentage"
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height, in pixels or percentage"
        },
        {
          "name": "data.container",
          "type": "DOMElement",
          "description": "DOM element used to render the chart"
        },
        {
          "name": "data.pixelWidth",
          "type": "number",
          "description": "Width of the DOM element, in pixels, used to render the chart"
        },
        {
          "name": "data.pixelHeight",
          "type": "number",
          "description": "Height of the DOM element, in pixels, used to render the chart"
        },
        {
          "name": "data.id",
          "type": "string",
          "description": "Chart ID"
        }
      ]
    }]
  },

  {
    "name": "chartTypeInvalid",
    "shortDescription": "Triggers when the given chart type is invalid or the chart type is not specified.",
    "description": "The event is fired when the given chart type is invalid or the chart type is not specified.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"chartTypeInvalid\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },

  {
    "name": "legendItemClicked",
    "shortDescription": "Triggers when the legend item is clicked.",
    "description": "This event is fired when the legend item is clicked.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-legendItemClicked"
    },
    "tags": {
      "action": "Click",
      "component": "Legend",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"legendItemClicked\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.id",
          "type": "string",
          "description": "Chart ID"
        },
        {
          "name": "data.chartX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.chartY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.datasetName",
          "type": "string",
          "description": "Dataset to which the data plot belongs"
        },
        {
          "name": "data.dataIndex",
          "type": "number",
          "description": "Index of the data plot, in the order of its definition in the dataset"
        },
        {
          "name": "data.visible",
          "type": "boolean",
          "description": "Visibility status of the legend item (true if shown, false if hidden)"
        },
        {
          "name": "data.preventDefaults",
          "type": "function",
          "description": ""
        }
      ]
    }]
  },

  {
    "name": "legendItemRollOver",
    "shortDescription": "Triggers when the mouse pointer is rolled over the legend item.",
    "description": "This event is fired when the mouse pointer is rolled over the legend item.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-legendItemRollOver"
    },
    "tags": {
      "action": "Hover",
      "component": "Legend",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"legendItemRollOver\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.id",
          "type": "string",
          "description": "Chart ID"
        },
        {
          "name": "data.chartX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.chartY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.datasetName",
          "type": "string",
          "description": "Dataset to which the data plot belongs"
        },
        {
          "name": "data.dataIndex",
          "type": "number",
          "description": "Index of the data plot, in the order of its definition in the dataset"
        },
        {
          "name": "data.visible",
          "type": "boolean",
          "description": "Visibility status of the legend item (true if shown, false if hidden)"
        }
      ]
    }]
  },

  {
    "name": "legendItemRollout",
    "shortDescription": "Triggers when the mouse pointer is rolled out from the legend item.",
    "description": "This event is fired when the mouse pointer is rolled out from the legend item.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-legendItemRollOut"
    },
    "tags": {
      "action": "Hover",
      "component": "Legend",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"legendItemRollout\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.id",
          "type": "string",
          "description": "Chart ID"
        },
        {
          "name": "data.chartX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.chartY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageX",
          "type": "number",
          "description": "x-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.pageY",
          "type": "number",
          "description": "y-coordinate of the pointer, relative to the chart"
        },
        {
          "name": "data.datasetName",
          "type": "string",
          "description": "Dataset to which the data plot belongs"
        },
        {
          "name": "data.dataIndex",
          "type": "number",
          "description": "Index of the data plot, in the order of its definition in the dataset"
        },
        {
          "name": "data.visible",
          "type": "boolean",
          "description": "Visibility status of the legend item (true if shown, false if hidden)"
        }
      ]
    }]
  },

  {
    "name": "beforeExport",
    "shortDescription": "Triggers just before the exporting process of a chart begins, through the export context menu or when the `FusionCharts#exportChart()` method is called.",
    "description": "This event is fired just before the exporting process of a chart begins, through the export context menu or when the `FusionCharts#exportChart()` method is called.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-beforeExport"
    },
    "tags": {
      "action": "Export",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"beforeExport\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.buttons",
          "type": "object",
          "description": "Object containing the status of buttons on the chart"
        },
        {
          "name": "data.bgColor",
          "type": "string",
          "description": "Background color of the exported chart"
        },
        {
          "name": "data.bgAlpha",
          "type": "number",
          "description": "Transparency set for the exported chart"
        },
        {
          "name": "data.exportaction",
          "type": "string",
          "description": "action for exporting image/PDF. Set to download, if the exported image will be sent back to the client as a download, set to save if it will be saved on the server."
        },
        {
          "name": "data.exportfilename",
          "type": "string",
          "description": "Name (with extension) for the exported image/PDF"
        },
        {
          "name": "data.exporthandler",
          "type": "string",
          "description": "Path of the server-side export handler"
        },
        {
          "name": "data.exportformat",
          "type": "string",
          "description": "Format in which the chart is exported (jpg, png, pdf)"
        },
        {
          "name": "data.exportparameters",
          "type": "string",
          "description": "Additional parameters sent by the chart (defined using the `exportParameters` chart attribute)"
        },
        {
          "name": "data.exporttargetwindow",
          "type": "string",
          "description": "In case of server-side exporting and when using download as action, this shows whether the exported image/PDF will opened in the same window (as an attachment for download), or it will open in a new window. Applicable only for server-side exporting."
        },
        {
          "name": "data.exportcallback",
          "type": "string",
          "description": "Callback function executed after the chart is exported"
        },
        {
          "name": "data.exportwithimages",
          "type": "boolean",
          "description": "Boolean attribute that indicates if the chart had external images that were also exported"
        },
        {
          "name": "data.exportformats",
          "type": "object",
          "description": "Object containing all the export formats available"
        }
      ]
    }]
  },

  {
    "name": "exported",
    "shortDescription": "Triggers when the chart exports successfully.",
    "description": "This event is fired when the chart exports successfully.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-exported"
    },
    "tags": {
      "action": "Export",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"exported\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.DOMId",
          "type": "string",
          "description": "ID of the chart exported"
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height"
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width"
        },
        {
          "name": "data.fileName",
          "type": "string",
          "description": "Name of the exported file and the path where it is saved"
        },
        {
          "name": "data.statusCode",
          "type": "boolean",
          "description": "Success status code of the export. Set to 1 if the export is successful, set to 0 if it fails."
        },
        {
          "name": "data.statusMessage",
          "type": "string",
          "description": "Message indicating success or failure"
        },
        {
          "name": "data.notice",
          "type": "string",
          "description": "Message indicating that the chart was previously exported in the same format. In this case, a suffix for the file is internally generated and added to the filename. Configure your code to show the properties and their values for the dataObj parameter in the console. You can then see the suffix that is generated internally."
        }
      ]
    }]
  },

  {
    "name": "exportCancelled",
    "shortDescription": "Triggers when the default behavior of the `beforeExport` event is cancelled by calling the `event.preventDefault()` method from the handler of the `beforeExport` event.",
    "description": "This event is fired when the default behavior of the `beforeExport` event is cancelled by calling the `event.preventDefault()` method from the handler of the `beforeExport` event.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-exportCancelled"
    },
    "tags": {
      "action": "Export",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"exportCancelled\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.buttons",
          "type": "object",
          "description": "Object containing the status of buttons on the chart"
        },
        {
          "name": "data.bgColor",
          "type": "string",
          "description": "Background color of the exported chart"
        },
        {
          "name": "data.bgAlpha",
          "type": "number",
          "description": "Transparency set for the exported chart"
        },
        {
          "name": "data.exportaction",
          "type": "string",
          "description": "action for exporting image/PDF. Set to download, if the exported image will be sent back to the client as a download, set to save if it will be saved on the server."
        },
        {
          "name": "data.exportfilename",
          "type": "string",
          "description": "Name (with extension) for the exported image/PDF"
        },
        {
          "name": "data.exporthandler",
          "type": "string",
          "description": "Path of the server-side export handler"
        },
        {
          "name": "data.exportformat",
          "type": "string",
          "description": "Format in which the chart is exported (jpg, png, pdf)"
        },
        {
          "name": "data.exportparameters",
          "type": "string",
          "description": "Additional parameters sent by the chart (defined using the `exportParameters` chart attribute)"
        },
        {
          "name": "data.exporttargetwindow",
          "type": "string",
          "description": "In case of server-side exporting and when using download as action, this shows whether the exported image/PDF will opened in the same window (as an attachment for download), or it will open in a new window. Applicable only for server-side exporting."
        },
        {
          "name": "data.exportcallback",
          "type": "string",
          "description": "Callback function executed after the chart is exported"
        },
        {
          "name": "data.exportwithimages",
          "type": "boolean",
          "description": "Boolean attribute that indicates if the chart had external images that were also exported"
        },
        {
          "name": "data.exportformats",
          "type": "object",
          "description": "Object containing all the export formats available"
        }
      ]
    }]
  },

  {
    "name": "beforePrint",
    "shortDescription": "Triggers before the printing process for a chart begins, after the `FusionCharts#print()` method is called on the chart.",
    "description": "This event is fired before the printing process for a chart begins, after the `FusionCharts#print()` method is called on the chart.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-beforePrint"
    },
    "tags": {
      "action": "Print",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"beforePrint\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },

  {
    "name": "printComplete",
    "shortDescription": "Triggers when the user confirms or cancels printing through the browser's print dialog box.",
    "description": "This event is fired when the user confirms or cancels printing through the browser's print dialog box.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-printComplete"
    },
    "tags": {
      "action": "Print",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"printComplete\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },

  {
    "name": "printCancelled",
    "shortDescription": "Triggers when the default behavior of the `beforePrint` event is cancelled by calling the `event.preventDefault()` method from the handler for the `beforePrint` event.",
    "description": "This event is fired when the default behavior of the `beforePrint` event is cancelled by calling the `event.preventDefault()` method from the handler for the `beforePrint` event.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-printCancelled"
    },
    "tags": {
      "action": "Print",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"printCancelled\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to **true** when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to **true** when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },

  {
    "name": "dataMarkerRollOver",
    "shortDescription": "Triggers when a user hovers over the data marker.",
    "description": "This event is fired when a user hovers over the data marker.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-dataMarkerRollOver"
    },
    "tags": {
      "action": "Hover",
      "component": "Data marker",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"dataMarkerRollOver\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "timestamp",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the time where the data marker has been specified to appear."
        },
        {
          "name": "timeText",
          "type": "string",
          "description": "The text representation of the `timestamp`."
        },
        {
          "name": "timeFormatter",
          "type": "string",
          "description": "The formatter string used to represent the `timestamp` as the time text."
        },
        {
          "name": "binStart",
          "type": "number",
          "description": "The timestamp corresponding to the start of the bin in which the data marker appears."
        },
        {
          "name": "binEnd",
          "type": "number",
          "description": "The timestamp corresponding to the end of the bin in which the data marker appears."
        },
        {
          "name": "binValue",
          "type": "number",
          "description": "The aggregated value on which the data marker is placed."
        },
        {
          "name": "binValueFormatted",
          "type": "string",
          "description": "The formatted representation of the `binValue`."
        },
        {
          "name": "measure",
          "type": "string",
          "description": "The name of the measure against which the data marker is being shown."
        },
        {
          "name": "series",
          "type": "string",
          "description": "The name of the series to which the data marker belongs."
        },
        {
          "name": "seriesValue",
          "type": "string",
          "description": "The series value to which the data marker belongs."
        },
        {
          "name": "identifier",
          "type": "string",
          "description": "The identifier text present on the data marker."
        },
        {
          "name": "tooltipText",
          "type": "string",
          "description": "The text for the data marker as shown on the tooltip."
        }
      ]
    }]
  },

  {
    "name": "dataMarkerRollOut",
    "shortDescription": "Triggers when a user hovers out of the data marker.",
    "description": "This event is fired when a user hovers out of the data marker.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-dataMarkerRollOut"
    },
    "tags": {
      "action": "Hover",
      "component": "Data marker",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"dataMarkerRollOut\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "timestamp",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the time where the data marker has been specified to appear."
        },
        {
          "name": "timeText",
          "type": "string",
          "description": "The text representation of the `timestamp`."
        },
        {
          "name": "timeFormatter",
          "type": "string",
          "description": "The formatter string used to represent the `timestamp` as the time text."
        },
        {
          "name": "binStart",
          "type": "number",
          "description": "The timestamp corresponding to the start of the bin in which the data marker appears."
        },
        {
          "name": "binEnd",
          "type": "number",
          "description": "The timestamp corresponding to the end of the bin in which the data marker appears."
        },
        {
          "name": "binValue",
          "type": "number",
          "description": "The aggregated value on which the data marker is placed."
        },
        {
          "name": "binValueFormatted",
          "type": "string",
          "description": "The formatted representation of the `binValue`."
        },
        {
          "name": "measure",
          "type": "string",
          "description": "The name of the measure against which the data marker is being shown."
        },
        {
          "name": "series",
          "type": "string",
          "description": "The name of the series to which the data marker belongs."
        },
        {
          "name": "seriesValue",
          "type": "string",
          "description": "The series value to which the data marker belongs."
        },
        {
          "name": "identifier",
          "type": "string",
          "description": "The identifier text present on the data marker."
        },
        {
          "name": "tooltipText",
          "type": "string",
          "description": "The text for the data marker as shown on the tooltip."
        }
      ]
    }]
  },

  {
    "name": "dataMarkerClick",
    "shortDescription": "Triggers when a user clicks on a data marker.",
    "description": "This event is fired when a user clicks on a data marker.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-dataMarkerClick"
    },
    "tags": {
      "action": "Click",
      "component": "Data marker",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"dataMarkerClick\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "timestamp",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the time where the data marker has been specified to appear."
        },
        {
          "name": "timeText",
          "type": "string",
          "description": "The text representation of the `timestamp`."
        },
        {
          "name": "timeFormatter",
          "type": "string",
          "description": "The formatter string used to represent the `timestamp` as the time text."
        },
        {
          "name": "binStart",
          "type": "number",
          "description": "The timestamp corresponding to the start of the bin in which the data marker appears."
        },
        {
          "name": "binEnd",
          "type": "number",
          "description": "The timestamp corresponding to the end of the bin in which the data marker appears."
        },
        {
          "name": "binValue",
          "type": "number",
          "description": "The aggregated value on which the data marker is placed."
        },
        {
          "name": "binValueFormatted",
          "type": "string",
          "description": "The formatted representation of the `binValue`."
        },
        {
          "name": "measure",
          "type": "string",
          "description": "The name of the measure against which the data marker is being shown."
        },
        {
          "name": "series",
          "type": "string",
          "description": "The name of the series to which the data marker belongs."
        },
        {
          "name": "seriesValue",
          "type": "string",
          "description": "The series value to which the data marker belongs."
        },
        {
          "name": "identifier",
          "type": "string",
          "description": "The identifier text present on the data marker."
        },
        {
          "name": "tooltipText",
          "type": "string",
          "description": "The text for the data marker as shown on the tooltip."
        }
      ]
    }]
  },

  {
    "name": "timeMarkerRollOver",
    "shortDescription": "Triggers when a user hovers over a time instant marker’s box or a time span marker’s rectangular area.",
    "description": "This event is fired when a user hovers over a time instant marker’s box or a time span marker’s rectangular area.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-timeMarkerRollOver"
    },
    "tags": {
      "action": "Hover",
      "component": "Time marker",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"timeMarkerRollOver\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start time of the time marker."
        },
        {
          "name": "startText",
          "type": "string",
          "description": "A human readable text representation of the `start` timestamp."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end time of the time marker."
        },
        {
          "name": "endText",
          "type": "string",
          "description": "A human readable text representation of the `end` timestamp"
        },
        {
          "name": "formatter",
          "type": "string",
          "description": "The formatter string used to format the `start` and `end` timestamps as `startText` and `endText` respectively."
        },
        {
          "name": "label",
          "type": "String",
          "description": "An array of time marker `labels`."
        },
        {
          "name": "type",
          "type": "String",
          "description": "The type of the time marker - `full` or `minimal`."
        }
      ]
    }]
  },

  {
    "name": "timeMarkerRollOut",
    "shortDescription": "Triggers when a user hovers out of a time instant marker’s box or a time span marker’s rectangular area.",
    "description": "This event is fired when a user hovers out of a time instant marker’s box or a time span marker’s rectangular area.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-timeMarkerRollOut"
    },
    "tags": {
      "action": "Hover",
      "component": "Time marker",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"timeMarkerRollOut\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start time of the time marker."
        },
        {
          "name": "startText",
          "type": "string",
          "description": "A human readable text representation of the `start` timestamp."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end time of the time marker."
        },
        {
          "name": "endText",
          "type": "string",
          "description": "A human readable text representation of the `end` timestamp"
        },
        {
          "name": "formatter",
          "type": "string",
          "description": "The formatter string used to format the `start` and `end` timestamps as `startText` and `endText` respectively."
        },
        {
          "name": "label",
          "type": "String",
          "description": "An array of time marker `labels`."
        },
        {
          "name": "type",
          "type": "String",
          "description": "The type of the time marker - `full` or `minimal`."
        }
      ]
    }]
  },

  {
    "name": "timeMarkerClick",
    "shortDescription": "Triggers when a user clicks on a time instant marker’s box or a time span marker’s rectangular area.",
    "description": "This event is fired when a user clicks on a time instant marker’s box or a time span marker’s rectangular area.",
    "info": "",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-timeMarkerClick"
    },
    "tags": {
      "action": "Click",
      "component": "Time marker",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"timeMarkerClick\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start time of the time marker."
        },
        {
          "name": "startText",
          "type": "string",
          "description": "A human readable text representation of the `start` timestamp."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end time of the time marker."
        },
        {
          "name": "endText",
          "type": "string",
          "description": "A human readable text representation of the `end` timestamp"
        },
        {
          "name": "formatter",
          "type": "string",
          "description": "The formatter string used to format the `start` and `end` timestamps as `startText` and `endText` respectively."
        },
        {
          "name": "label",
          "type": "String",
          "description": "An array of time marker `labels`."
        },
        {
          "name": "type",
          "type": "String",
          "description": "The type of the time marker - `full` or `minimal`."
        }
      ]
    }]
  },

  {
    "name": "referenceLineRollOver",
    "shortDescription": "Triggers when a user hovers over the notch of a reference line.",
    "description": "This event is fired when a user hovers over the notch of a reference line.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-referenceLineRollOver"
    },
    "tags": {
      "action": "Hover",
      "component": "Reference line",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"referenceLineRollOver\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "label",
          "type": "String",
          "description": "The label of the reference line."
        },
        {
          "name": "value",
          "type": "number",
          "description": "The value against which the reference line has been plotted."
        },
        {
          "name": "valueFormatted",
          "type": "String",
          "description": "The formatted representation of the `value` of the reference line."
        }
      ]
    }]
  },

  {
    "name": "referenceLineRollOut",
    "shortDescription": "Triggers when a user hovers out of the notch of a reference line.",
    "description": "This event is fired when a user hovers out of the notch of a reference line.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-referenceLineRollOut"
    },
    "tags": {
      "action": "Hover",
      "component": "Reference line",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"referenceLineRollOutl\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "label",
          "type": "String",
          "description": "The label of the reference line."
        },
        {
          "name": "value",
          "type": "number",
          "description": "The value against which the reference line has been plotted."
        },
        {
          "name": "valueFormatted",
          "type": "string",
          "description": "The formatted representation of the `value` of the reference line."
        }
      ]
    }]
  },

  {
    "name": "referenceLineClick",
    "shortDescription": "Triggers when a user clicks on the notch of a reference line.",
    "description": "This event is fired when a user clicks on the notch of a reference line.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-referenceLineClick"
    },
    "tags": {
      "action": "Click",
      "component": "Reference line",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"referenceLineClick\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "label",
          "type": "string",
          "description": "The label of the reference line."
        },
        {
          "name": "value",
          "type": "number",
          "description": "The value against which the reference line has been plotted."
        },
        {
          "name": "valueFormatted",
          "type": "string",
          "description": "The formatted representation of the `value` of the reference line."
        }
      ]
    }]
  },

  {
    "name": "referenceZoneRollOver",
    "shortDescription": "Triggers when a user hovers over a reference zone’s notches.",
    "description": "This event is fired when a user hovers over a reference zone’s notches.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-referenceZoneRollOver"
    },
    "tags": {
      "action": "Hover",
      "component": "Reference zone",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"referenceZoneRollOver\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "label",
          "type": "string",
          "description": "The label of the reference line."
        },
        {
          "name": "valueMax",
          "type": "number",
          "description": "The maximum value of the reference zone."
        },
        {
          "name": "valueMin",
          "type": "number",
          "description": "The minimum value of the reference zone."
        },
        {
          "name": "valueMaxFormatted",
          "type": "string",
          "description": "The formatted valueMax of the reference zone."
        },
        {
          "name": "valueMinFormatted",
          "type": "string",
          "description": "The formatted `valueMin` of the reference zone."
        }
      ]
    }]
  },

  {
    "name": "referenceZoneRollOut",
    "shortDescription": "Triggers when a user hovers out of the reference zone’s notches.",
    "description": "This event is fired when a user hovers out of the reference zone’s notches.",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-referenceZoneRollOut"
    },
    "tags": {
      "action": "Hover",
      "component": "Reference zone",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"referenceZoneRollOut\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "label",
          "type": "string",
          "description": "The label of the reference line."
        },
        {
          "name": "valueMax",
          "type": "number",
          "description": "The maximum value of the reference zone."
        },
        {
          "name": "valueMin",
          "type": "number",
          "description": "The minimum value of the reference zone."
        },
        {
          "name": "valueMaxFormatted",
          "type": "string",
          "description": "The formatted valueMax of the reference zone."
        },
        {
          "name": "valueMinFormatted",
          "type": "string",
          "description": "The formatted `valueMin` of the reference zone."
        }
      ]
    }]
  },

  {
    "name": "referenceZoneClick",
    "shortDescription": "Triggers when a user clicks on a reference zone’s notches",
    "description": "This event is fired when a user clicks on a reference zone’s notches",
    "info": "",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-referenceZoneClick"
    },
    "tags": {
      "action": "Click",
      "component": "Reference zone",
      "lifecycle": ""
    },
    "syntax": "{\r\n   \"chart\": {\r\n     // ...\r\n   },\r\n   \"data\":[\r\n     // ...\r\n   ]\r\n },\r\n \"events\": {\r\n   \"referenceZoneClick\": function(ev) {\r\n     console.log(ev);\r\n   }\r\n }",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "label",
          "type": "string",
          "description": "The label of the reference line."
        },
        {
          "name": "valueMax",
          "type": "number",
          "description": "The maximum value of the reference zone."
        },
        {
          "name": "valueMin",
          "type": "number",
          "description": "The minimum value of the reference zone."
        },
        {
          "name": "valueMaxFormatted",
          "type": "string",
          "description": "The formatted valueMax of the reference zone."
        },
        {
          "name": "valueMinFormatted",
          "type": "string",
          "description": "The formatted `valueMin` of the reference zone."
        }
      ]
    }]
  },

  {
    "name": "dataPlotClick",
    "shortDescription": "Triggers when the data plot is clicked.",
    "description": "This event is fired when the data plot is clicked.",
    "info": "The payload data of event object will vary slightly based on plot type. Refer to parameter tables below to know more.",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "Click",
      "component": "Data Plot",
      "lifecycle": ""
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"dataPlotClick\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
        "name": "Common across all plots",
        "header": "Common across all plots",
        "subparams": [{
            "name": "start",
            "type": "number",
            "description": "The UNIX timestamp corresponding to the start time of the bin in which the plot being clicked exists."
          },
          {
            "name": "end",
            "type": "number",
            "description": "The UNIX timestamp corresponding to the end time of the bin in which the plot being clicked exists."
          },
          {
            "name": "startText",
            "type": "string",
            "description": "The `start` timestamp represented in a human readable format."
          },
          {
            "name": "endText",
            "type": "string",
            "description": "The `end` timestamp represented in a human readable format."
          },
          {
            "name": "timeFormatter",
            "type": "string",
            "description": "The formatter string used to represent the `start`/`end` timestamps as `startText`/`endText`."
          },
          {
            "name": "plotType",
            "type": "string",
            "description": "The type of the plot being clicked - `column`, `line`, `stepLine`, `smoothLine`, `area`, `stepArea`, `smoothArea`, `candlestick` or `ohlc`."
          },
          {
            "name": "series",
            "type": "string",
            "description": "The name of the series that the plot belongs to."
          },
          {
            "name": "seriesValue",
            "type": "string",
            "description": "The value of the `series` that the plot represents."
          },
          {
            "name": "binUnit",
            "type": "string",
            "description": "The unit of time being represented in the bin - `millisecond`, `second`, `minute`, `hour`, `day`, `month` or `year`."
          },
          {
            "name": "binMultiplier",
            "type": "number",
            "description": "The multiplier of the `binUnit` being displayed."
          },
          {
            "name": "aggregation",
            "type": "string",
            "description": "The aggregation strategy used aggregate the values in the bin - `sum`, `average`, `min`, `max`, `first`, `last`."
          }
        ]
      },
      {
        "name": "Column, Line, Step Line, Smooth Line, Area, Step Area, Smooth Area",
        "header": "Column, Line, Step Line, Smooth Line, Area, Step Area, Smooth Area",
        "subparams": [{
            "name": "measure",
            "type": "string",
            "description": "The name of the measure being represented by the plot."
          },
          {
            "name": "binValue",
            "type": "number",
            "description": "The raw aggregated value being represented by the plot."
          },
          {
            "name": "binValueFormatted",
            "type": "string",
            "description": "The aggregated `binValue` being displayed by the plot, after formatting."
          }
        ]
      },
      {
        "name": "Candlestick, OHLC",
        "header": "Candlestick, OHLC",
        "subparams": [{
            "name": "measure",
            "type": "string",
            "description": "The name of the measure being represented as the `close` value of the plot."
          },
          {
            "name": "measureOpen",
            "type": "string",
            "description": "The name of the measure being represented as the `open` value of the plot."
          },
          {
            "name": "measureHigh",
            "type": "string",
            "description": "The name of the measure being represented as the `high` value of the plot."
          },
          {
            "name": "measureLow",
            "type": "string",
            "description": "The name of the measure being represented as the `low` value of the plot."
          },
          {
            "name": "measureClose",
            "type": "string",
            "description": "The name of the measure being represented as the `close` value of the plot."
          },
          {
            "name": "binValue",
            "type": "number",
            "description": "The raw aggregated `close` value being represented by the plot."
          },
          {
            "name": "binValueFormatted",
            "type": "string",
            "description": "The aggregated `close` value being displayed by the plot, after formatting."
          },
          {
            "name": "binOpen",
            "type": "number",
            "description": "The raw aggregated `open` value being represented by the plot."
          },
          {
            "name": "binOpenFormatted",
            "type": "string",
            "description": "The aggregated `open` value being displayed by the plot, after formatting."
          },
          {
            "name": "binHigh",
            "type": "number",
            "description": "The raw aggregated `high` value being represented by the plot."
          },
          {
            "name": "binHighFormatted",
            "type": "string",
            "description": "The aggregated `high` value being displayed by the plot, after formatting."
          },
          {
            "name": "binLow",
            "type": "number",
            "description": "The raw aggregated `low` value being represented by the plot."
          },
          {
            "name": "binLowFormatted",
            "type": "string",
            "description": "The aggregated `low` value being displayed by the plot, after formatting."
          },
          {
            "name": "binClose",
            "type": "number",
            "description": "The raw aggregated `close` value being represented by the plot."
          },
          {
            "name": "binCloseFormatted",
            "type": "string",
            "description": "The aggregated `close` value being displayed by the plot, after formatting."
          }
        ]
      }
    ]
  },

  {
    "name": "dataPlotRollOver",
    "shortDescription": "Triggers when the data plot is hovered upon.",
    "description": "This event is fired when the data plot is hovered upon.",
    "info": "The payload data of event object will vary slightly based on plot type.",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "Hover",
      "component": "Data Plot",
      "lifecycle": ""
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"dataPlotRollOver\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
        "name": "Common across all plots",
        "header": "Common across all plots",
        "subparams": [{
            "name": "start",
            "type": "number",
            "description": "The UNIX timestamp corresponding to the start time of the bin in which the plot being clicked exists."
          },
          {
            "name": "end",
            "type": "number",
            "description": "The UNIX timestamp corresponding to the end time of the bin in which the plot being clicked exists."
          },
          {
            "name": "startText",
            "type": "string",
            "description": "The `start` timestamp represented in a human readable format."
          },
          {
            "name": "endText",
            "type": "string",
            "description": "The `end` timestamp represented in a human readable format."
          },
          {
            "name": "timeFormatter",
            "type": "string",
            "description": "The formatter string used to represent the `start`/`end` timestamps as `startText`/`endText`."
          },
          {
            "name": "plotType",
            "type": "string",
            "description": "The type of the plot being clicked - `column`, `line`, `stepLine`, `smoothLine`, `area`, `stepArea`, `smoothArea`, `candlestick` or `ohlc`."
          },
          {
            "name": "series",
            "type": "string",
            "description": "The name of the series that the plot belongs to."
          },
          {
            "name": "seriesValue",
            "type": "string",
            "description": "The value of the `series` that the plot represents."
          },
          {
            "name": "binUnit",
            "type": "string",
            "description": "The unit of time being represented in the bin - `millisecond`, `second`, `minute`, `hour`, `day`, `month` or `year`."
          },
          {
            "name": "binMultiplier",
            "type": "number",
            "description": "The multiplier of the `binUnit` being displayed."
          },
          {
            "name": "aggregation",
            "type": "string",
            "description": "The aggregation strategy used aggregate the values in the bin - `sum`, `average`, `min`, `max`, `first`, `last`."
          }
        ]
      },
      {
        "name": "Column, Line, Step Line, Smooth Line, Area, Step Area, Smooth Area",
        "header": "Column, Line, Step Line, Smooth Line, Area, Step Area, Smooth Area",
        "subparams": [{
            "name": "measure",
            "type": "string",
            "description": "The name of the measure being represented by the plot."
          },
          {
            "name": "binValue",
            "type": "number",
            "description": "The raw aggregated value being represented by the plot."
          },
          {
            "name": "binValueFormatted",
            "type": "string",
            "description": "The aggregated `binValue` being displayed by the plot, after formatting."
          }
        ]
      },
      {
        "name": "Candlestick, OHLC",
        "header": "Candlestick, OHLC",
        "subparams": [{
            "name": "measure",
            "type": "string",
            "description": "The name of the measure being represented as the `close` value of the plot."
          },
          {
            "name": "measureOpen",
            "type": "string",
            "description": "The name of the measure being represented as the `open` value of the plot."
          },
          {
            "name": "measureHigh",
            "type": "string",
            "description": "The name of the measure being represented as the `high` value of the plot."
          },
          {
            "name": "measureLow",
            "type": "string",
            "description": "The name of the measure being represented as the `low` value of the plot."
          },
          {
            "name": "measureClose",
            "type": "string",
            "description": "The name of the measure being represented as the `close` value of the plot."
          },
          {
            "name": "binValue",
            "type": "number",
            "description": "The raw aggregated `close` value being represented by the plot."
          },
          {
            "name": "binValueFormatted",
            "type": "string",
            "description": "The aggregated `close` value being displayed by the plot, after formatting."
          },
          {
            "name": "binOpen",
            "type": "number",
            "description": "The raw aggregated `open` value being represented by the plot."
          },
          {
            "name": "binOpenFormatted",
            "type": "string",
            "description": "The aggregated `open` value being displayed by the plot, after formatting."
          },
          {
            "name": "binHigh",
            "type": "number",
            "description": "The raw aggregated `high` value being represented by the plot."
          },
          {
            "name": "binHighFormatted",
            "type": "string",
            "description": "The aggregated `high` value being displayed by the plot, after formatting."
          },
          {
            "name": "binLow",
            "type": "number",
            "description": "The raw aggregated `low` value being represented by the plot."
          },
          {
            "name": "binLowFormatted",
            "type": "string",
            "description": "The aggregated `low` value being displayed by the plot, after formatting."
          },
          {
            "name": "binClose",
            "type": "number",
            "description": "The raw aggregated `close` value being represented by the plot."
          },
          {
            "name": "binCloseFormatted",
            "type": "string",
            "description": "The aggregated `close` value being displayed by the plot, after formatting."
          }
        ]
      }
    ]
  },

  {
    "name": "dataPlotRollOut",
    "shortDescription": "Triggers when a data plot is hovered out.",
    "description": "This event is fired when a data plot is hovered out.",
    "info": "The payload data of event object will vary slightly based on plot type.",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "Hover",
      "component": "Data Plot",
      "lifecycle": ""
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"dataPlotRollOut\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
        "name": "Common across all plots",
        "header": "Common across all plots",
        "subparams": [{
            "name": "start",
            "type": "number",
            "description": "The UNIX timestamp corresponding to the start time of the bin in which the plot being clicked exists."
          },
          {
            "name": "end",
            "type": "number",
            "description": "The UNIX timestamp corresponding to the end time of the bin in which the plot being clicked exists."
          },
          {
            "name": "startText",
            "type": "string",
            "description": "The `start` timestamp represented in a human readable format."
          },
          {
            "name": "endText",
            "type": "string",
            "description": "The `end` timestamp represented in a human readable format."
          },
          {
            "name": "timeFormatter",
            "type": "string",
            "description": "The formatter string used to represent the `start`/`end` timestamps as `startText`/`endText`."
          },
          {
            "name": "plotType",
            "type": "string",
            "description": "The type of the plot being clicked - `column`, `line`, `stepLine`, `smoothLine`, `area`, `stepArea`, `smoothArea`, `candlestick` or `ohlc`."
          },
          {
            "name": "series",
            "type": "string",
            "description": "The name of the series that the plot belongs to."
          },
          {
            "name": "seriesValue",
            "type": "string",
            "description": "The value of the `series` that the plot represents."
          },
          {
            "name": "binUnit",
            "type": "string",
            "description": "The unit of time being represented in the bin - `millisecond`, `second`, `minute`, `hour`, `day`, `month` or `year`."
          },
          {
            "name": "binMultiplier",
            "type": "number",
            "description": "The multiplier of the `binUnit` being displayed."
          },
          {
            "name": "aggregation",
            "type": "string",
            "description": "The aggregation strategy used aggregate the values in the bin - `sum`, `average`, `min`, `max`, `first`, `last`."
          }
        ]
      },
      {
        "name": "Column, Line, Step Line, Smooth Line, Area, Step Area, Smooth Area",
        "header": "Column, Line, Step Line, Smooth Line, Area, Step Area, Smooth Area",
        "subparams": [{
            "name": "measure",
            "type": "string",
            "description": "The name of the measure being represented by the plot."
          },
          {
            "name": "binValue",
            "type": "number",
            "description": "The raw aggregated value being represented by the plot."
          },
          {
            "name": "binValueFormatted",
            "type": "string",
            "description": "The aggregated `binValue` being displayed by the plot, after formatting."
          }
        ]
      },
      {
        "name": "Candlestick, OHLC",
        "header": "Candlestick, OHLC",
        "subparams": [{
            "name": "measure",
            "type": "string",
            "description": "The name of the measure being represented as the `close` value of the plot."
          },
          {
            "name": "measureOpen",
            "type": "string",
            "description": "The name of the measure being represented as the `open` value of the plot."
          },
          {
            "name": "measureHigh",
            "type": "string",
            "description": "The name of the measure being represented as the `high` value of the plot."
          },
          {
            "name": "measureLow",
            "type": "string",
            "description": "The name of the measure being represented as the `low` value of the plot."
          },
          {
            "name": "measureClose",
            "type": "string",
            "description": "The name of the measure being represented as the `close` value of the plot."
          },
          {
            "name": "binValue",
            "type": "number",
            "description": "The raw aggregated `close` value being represented by the plot."
          },
          {
            "name": "binValueFormatted",
            "type": "string",
            "description": "The aggregated `close` value being displayed by the plot, after formatting."
          },
          {
            "name": "binOpen",
            "type": "number",
            "description": "The raw aggregated `open` value being represented by the plot."
          },
          {
            "name": "binOpenFormatted",
            "type": "string",
            "description": "The aggregated `open` value being displayed by the plot, after formatting."
          },
          {
            "name": "binHigh",
            "type": "number",
            "description": "The raw aggregated `high` value being represented by the plot."
          },
          {
            "name": "binHighFormatted",
            "type": "string",
            "description": "The aggregated `high` value being displayed by the plot, after formatting."
          },
          {
            "name": "binLow",
            "type": "number",
            "description": "The raw aggregated `low` value being represented by the plot."
          },
          {
            "name": "binLowFormatted",
            "type": "string",
            "description": "The aggregated `low` value being displayed by the plot, after formatting."
          },
          {
            "name": "binClose",
            "type": "number",
            "description": "The raw aggregated `close` value being represented by the plot."
          },
          {
            "name": "binCloseFormatted",
            "type": "string",
            "description": "The aggregated `close` value being displayed by the plot, after formatting."
          }
        ]
      }
    ]
  },
  {
    "name": "ready",
    "shortDescription": "Triggers when the library is ready to be used.",
    "description": "This event is fired when the FusionCharts library is ready to be used. By the time this event is raised, the browser's DOM is ready to be interacted with, which corresponds to the DOMContentLoaded event of browsers. In older browsers, where `DOMContentLoaded` is not fired, the ready event corresponds to the load event of the page. In case the FusionCharts library is included in the page when the `DOMContentLoaded` event is already fired (i.e. the script is loaded asynchronously using `AJAX` or by using script deferring methods) the ready event is still fired to ensure the integrity of all the listeners.\n In many ways the nature of this event is similar to the `jQuery(document).ready` function of the jQuery library and the `Ext.onReady` function of the ExtJS library. One should interact with FusionCharts (i.e. create new charts, set options, etc.) only after this event has been fired. This event also helps you to neatly write your code in separate script files and in the page `<head>` thus keeping scripts from being a part of your page `<body>` \n An alternate (and shorthand) method to subscribing the ready event is to use the `FusionCharts.ready` function. One advantage that the ready function has over the ready event is that the event is fired only once during the life-cycle of a page while functions passed to the ready function are executed even when attached after the ready event has been fired. This is a library level event and as such can be only listened via the FusionChart object on the FusionCharts class alone. It will not be fired if it is subscribed to from individual chart instances.",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"ready\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered"
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed."
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was defaultPrevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "Function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered"
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.version",
          "type": "array",
          "description": "FusionCharts framework version returned in the form of an array, equivalent to the array version"
        },
        {
          "name": "data.now",
          "type": "boolean",
          "description": "Boolean attribute to indicate whether the event was triggered at the instant of the `window.ondomcontentloaded` event (`window.onload` for older browsers) or whether the window was already loaded and the event was fired to maintain integrity"
        }
      ]
    }]
  },
  {
    "name": "loaded",
    "shortDescription": "Triggers when FusionCharts library is downloaded.",
    "description": "This event is fired when FusionCharts has finished downloading itself in the client environment. It indicates that the all the resources required to render a FusionCharts chart is ready and that a chart can be rendered. This event can be used to hide any loader components that you might have on your page \n",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-loaded"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"loaded\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.type",
          "type": "string",
          "description": "Type of chart rendered"
        }
      ]
    }]
  },
  {
    "name": "containerNotFound",
    "shortDescription": "Triggers if the container is either not found or not provided after invoking  FusionCharts#render.",
    "description": "This event is fired if the container is either not found or not provided after invoking  FusionCharts#render.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-containerNotFound"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"containerNotFound\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },
  {
    "name": "beforeInitialize",
    "shortDescription": "Triggers every time a new instance of FusionCharts is created.",
    "description": "This pre-initialization event is fired every time a new instance of FusionCharts is created. It then triggers a number of modules that need to be setup on every instance of FusionCharts; the event can be used to perform any actions required to be completed before the initialization of each chart.\n Because this event is triggered upon instantiating a new FusionCharts object, it is impossible to listen to this event by adding an event listener to the chart. By the time the event listener is attached (using the `FusionCharts#addEventListener` method), the event will already have been already fired.\n However, there are alternate ways that can be used to listen to this event. You can listen to the FusionCharts global events, using the `FusionCharts.addEventListener` static method before even creating a new instance. The required instance of FusionCharts can then be identified from within the event handler by using `event.sender.id`. You can also pass the event listener for the correct event within the `events` object when creating an instance of FusionCharts",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-beforeInitialize"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"beforeInitialize\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.type",
          "type": "string",
          "description": "Type of chart rendered"
        },
        {
          "name": "data.renderAt",
          "type": "string",
          "description": "Id of the HTML DOM element within which the chart is rendered."
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width."
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height."
        },
        {
          "name": "data.dataFormat",
          "type": "string",
          "description": "Type of data (json, jsonurl, xml, xmlurl) passed to the chart object."
        },
        {
          "name": "data.dataSource",
          "type": "object",
          "description": "Object containing the source data for the chart"
        },
        {
          "name": "data.events",
          "type": "object",
          "description": "Object containing details of all events configured for the chart."
        }
      ]
    }]
  },
  {
    "name": "initialized",
    "shortDescription": "Triggers when a new instance of FusionCharts is created.",
    "description": "This event is fired when a new instance of FusionCharts is created. Initialization does not indicate that the chart has rendered; it only indicates that the JavaScript object instance (using `new FusionCharts({...}))` is created and is ready to be operated upon.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-initialized"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"initialized\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.type",
          "type": "string",
          "description": "Type of chart rendered"
        },
        {
          "name": "data.renderAt",
          "type": "string",
          "description": "Id of the HTML DOM element within which the chart is rendered."
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width."
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height."
        },
        {
          "name": "data.dataFormat",
          "type": "string",
          "description": "Type of data (json, jsonurl, xml, xmlurl) passed to the chart object."
        },
        {
          "name": "data.dataSource",
          "type": "object",
          "description": "Object containing the source data for the chart"
        },
        {
          "name": "data.events",
          "type": "object",
          "description": "Object containing details of all events configured for the chart."
        }
      ]
    }]
  },
  {
    "name": "beforeDraw",
    "shortDescription": "Triggers when the chart is redrawn because of a data update, resize, change of chart message, or change of chart type.",
    "description": "This event is fired when the chart is redrawn because of a data update, resize, change of chart message, or change of chart type.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-beforeDraw"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"beforeDraw\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },
  {
    "name": "drawComplete",
    "shortDescription": "Triggers when the chart draws for the first time or is redrawn because of a data update, resize, change of chart message, or change of chart type",
    "description": "This event is fired when the chart draws for the first time or is redrawn because of a data update, resize, change of chart message, or change of chart type.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-drawComplete"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"drawComplete\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.drawCount",
          "type": "number",
          "description": "Number of times the chart is drawn/redrawn"
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width, in pixels or percentage."
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height, in pixels or percentage."
        },
        {
          "name": "data.displayingMessage",
          "type": "boolean",
          "description": ""
        }
      ]
    }]
  },

  {
    "name": "drawCancelled",
    "shortDescription": "Triggers when `event.preventDefault()` is called from within the handler for the `beforeDraw` event.",
    "description": "This event is fired when `event.preventDefault()` is called from within the handler for the `beforeDraw` event.",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"drawCancelled\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },
  {
    "name": "beforeResize",
    "shortDescription": "Triggers before a chart is resized.",
    "description": "This event is fired before a chart is resized.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-beforeResize"
    },
    "tags": {
      "action": "Resize",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"beforeResize\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.currentWidth",
          "type": "number",
          "description": "Chart width, before resize, in pixels or percentage"
        },
        {
          "name": "data.currentHeight",
          "type": "number",
          "description": "Chart height, before resize, in pixels or percentage"
        },
        {
          "name": "data.newWidth",
          "type": "number",
          "description": "Chart width, after resize, in pixels or percentage"
        },
        {
          "name": "data.newHeight",
          "type": "number",
          "description": "Chart height, after resize, in pixels or percentage"
        }
      ]
    }]
  },
  {
    "name": "resized",
    "shortDescription": "Triggers when the chart is resized.",
    "description": "This event is fired when the chart is resized either by calling `FusionCharts#resizeTo()` or by changing the dimensions of the chart container element, when the dimensions of the chart have been provided in the percentage format.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-resized"
    },
    "tags": {
      "action": "Resize",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"resized\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.id",
          "type": "string",
          "description": "Chart ID."
        },
        {
          "name": "data.width",
          "type": "number",
          "description": "Chart width, after resize, in pixels or percentage."
        },
        {
          "name": "data.height",
          "type": "number",
          "description": "Chart height, after resize, in pixels or percentage."
        },
        {
          "name": "data.prevWidth",
          "type": "number",
          "description": "Chart width, before resize, in pixels or percentage."
        },
        {
          "name": "data.prevHeight",
          "type": "number",
          "description": "Chart height, before resize, in pixels or percentage."
        },
        {
          "name": "data.originalWidth",
          "type": "number",
          "description": "Chart width, when the chart was first rendered."
        },
        {
          "name": "data.originalHeight",
          "type": "number",
          "description": "Chart height, when the chart was first rendered."
        },
        {
          "name": "data.pixelWidth",
          "type": "number",
          "description": "Width of the DOM element, in pixels, used to render the chart."
        },
        {
          "name": "data.pixelHeight",
          "type": "number",
          "description": "Height of the DOM element, in pixels, used to render the chart."
        }
      ]
    }]
  },
  {
    "name": "resizeCancelled",
    "shortDescription": "Triggers when event.preventDefault() is called from within the handler of the beforeResize event.",
    "description": "This event is fired when event.preventDefault() is called from within the handler of the beforeResize event. This cancels any FusionCharts#resizeTo() invocations.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-resizeCancelled"
    },
    "tags": {
      "action": "Resize",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"resizeCancelled\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.currentWidth",
          "type": "number",
          "description": "Current chart width, in pixels or percentage."
        },
        {
          "name": "data.currentHeight",
          "type": "number",
          "description": "Current chart height, in pixels or percentage."
        },
        {
          "name": "data.cancelledTargetWidth",
          "type": "number",
          "description": "Chart width, in pixels or percentage, requested to be set but cancelled."
        },
        {
          "name": "data.cancelledTargetHeight",
          "type": "number",
          "description": "Chart height, in pixels or percentage, requested to be set but cancelled."
        }
      ]
    }]
  },
  {
    "name": "beforeDispose",
    "shortDescription": "Triggers before the chart is deleted and cleaned from the memory.",
    "description": "This event is fired before the chart is deleted and cleaned from the DOM and the browser’s memory.",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "Dispose",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"beforeDispose\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },
  {
    "name": "disposed",
    "shortDescription": "Triggers when the chart is deleted and cleaned from the DOM and the browser’s memory. ",
    "description": "Usually, this event is fired by the `FusionCharts#dispose()` method. FusionCharts also triggers it when an already rendered chart is re-rendered. Unused charts should always be disposed to avoid memory-leaks within an application or dashboard.",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "Dispose",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"disposed\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },
  {
    "name": "disposeCancelled",
    "shortDescription": "Triggers when the `beforeDispose` event is cancelled. ",
    "description": "This event is fired when the default behaviour of the `beforeDispose` event is cancelled using `event.preventDefault()` from a handler attached to the `beforeDispose` event.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-disposeCancelled"
    },
    "tags": {
      "action": "Dispose",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"disposeCancelled\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        }
      ]
    }]
  },
  {
    "name": "animationInvoked",
    "shortDescription": "Triggers when the animation is started in the chart. ",
    "description": "This event is fired when the animation is started in the chart.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-animationInvoked"
    },
    "tags": {
      "action": "",
      "component": "",
      "lifecycle": "Lifecycle"
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"animationInvoked\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "eventType",
          "type": "string",
          "description": "Type (name) of the event triggered."
        },
        {
          "name": "eventId",
          "type": "number",
          "description": "Unique ID associated with the event. Internally, it is an incrementing counter that can also be used to verify the order in which the event was triggered."
        },
        {
          "name": "sender",
          "type": "FusionCharts",
          "description": "Instance of the FusionCharts object that fired this event. Events that are fired by the framework (and not by individual charts) have the framework as this property."
        },
        {
          "name": "cancelled",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether an event's propagation was cancelled; set to true when `eventObj.stopPropagation()` is called."
        },
        {
          "name": "stopPropagation",
          "type": "function",
          "description": "Function called from within a listener to prevent subsequent listeners from being executed"
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether the default action of the event was prevented; set to true when `eventObj.preventDefault()` is called."
        },
        {
          "name": "preventDefault",
          "type": "function",
          "description": "function to prevent the default action of an event. For example, if the `eventObj.preventDefault()` function is called for the beforeResize event, the chart will not be resized and the resizeCancelled event will be triggered."
        },
        {
          "name": "detached",
          "type": "boolean",
          "description": "Boolean attribute that indicates whether a listener has been detached and will no longer be executed; set to true when `eventObj.detachHandler()` is called."
        },
        {
          "name": "detachHandler",
          "type": "function",
          "description": "Function to allow the listener to remove itself rather than being called externally by the `removeEventListener()` method. It is useful for one-time event listening or for special situations when the event is no longer required to be listened when it has been triggered with a specific condition."
        },
        {
          "name": "data.duration",
          "type": "number",
          "description": "Specifies the animation duration is milliseconds(ms)."
        }
      ]
    }]
  },
  {
    "name": "selectionChange",
    "shortDescription": "Triggers whenever a user performs an action which results in the spread of time changing on the focus canvases ",
    "description": "These actions include: \n After every instance of a panning/zooming action from a focus canvas. \n After selecting a standard range of time from the Standard Range Selector. \n After applying a valid range of time from the Custom Range Selector. \n After every instance of a panning/zooming action using the time navigator’s window. \n When using an API which affects the focused spread of time in the chart: \n FusionCharts#setCurrentTimeSelection \n `FusionCharts#setBinSize` \n `FusionCharts#setJSONData` \n `FusionCharts#render` \n",
    "example": {
      "header": "Example",
      "_slug": ""
    },
    "tags": {
      "action": "Zoom/Pan",
      "component": "Chart",
      "lifecycle": ""
    },
    "syntax": "{\r\n    \"chart\": {\r\n        // ...\r\n    },\r\n    \"data\": [\r\n        // ...\r\n    ]\r\n},\r\n\"events\": {\r\n    \"selectionChange\": function(ev) {\r\n        console.log(ev);\r\n    }\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the time selection"
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the time selection."
        },
        {
          "name": "binUnit",
          "type": "String",
          "description": "The unit of time being represented on each bin - millisecond, second, minute, hour, day, month or year."
        },
        {
          "name": "binMultiplier",
          "type": "number",
          "description": "The multiplier for the `binUnit` being represented in each bin."
        }
      ]
    }]
  },
  {
    "name": "standardRangeSelect",
    "shortDescription": "Triggers when a standard period is selected from the Standard Range Selector. ",
    "description": "This event is fired when a standard period is selected from the Standard Range Selector.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-standardRangeSelect"
    },
    "tags": {
      "action": "Click",
      "component": "SRS",
      "lifecycle": ""
    },
    "syntax": " {\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"standardRangeSelect\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "unit",
          "type": "string",
          "description": "The unit of time being selected - `minute`, `hour`, `day`, `month` or `year`."
        },
        {
          "name": "multiplier",
          "type": "number",
          "description": "The multiplier for the unit being selected."
        },
        {
          "name": "text",
          "type": "string",
          "description": "The text representing the standard period - `10Y`, `5Y`, `3Y`, `2Y`, `1Y`, `6M`, `3M`, `1M`, `15D`, `7D`, `1D`, `12H`, `6H`, `3H`, `1H` or `30m`"
        }
      ]
    }]
  },
  {
    "name": "customRangeSelect",
    "shortDescription": "Triggers when a valid custom period is applied from the Custom Range Selector ",
    "description": "This event is fired when a valid custom period is applied from the Custom Range Selector.",
    "example": {
      "header": "Example",
      "_slug": "fusiontime-event-customRangeSelect"
    },
    "tags": {
      "action": "Click",
      "component": "CRS",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"customRangeSelect\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the custom range selection."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the custom range selection."
        },
        {
          "name": "startText",
          "type": "string",
          "description": "The formatted time text corresponding to the `start` time of the custom range selection."
        },
        {
          "name": "endText",
          "type": "string",
          "description": "The formatted time text corresponding to the end time of the custom range selection."
        },
        {
          "name": "formatter",
          "type": "string",
          "description": "The formatter string used to represent the `start`/`end` time as the `startText`/`endText`."
        }
      ]
    }]
  },
  {
    "name": "timeNavBrushStart",
    "shortDescription": "Triggers at the start of the user’s interaction with the time navigator’s window. ",
    "description": "This event is fired at the start of the user’s interaction with the time navigator’s window.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-timeNavBrushStart"
    },
    "tags": {
      "action": "Drag",
      "component": "Time Navigator",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"timeNavBrushStart\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the brush selection."
        },
        {
          "name": "startText",
          "type": "string",
          "description": "A human readable text representation of the `start` timestamp (as shown in the active window labels)"
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the brush selection."
        },
        {
          "name": "endText",
          "type": "string",
          "description": " A human readable textual representation of the `end` timestamp (as shown in the active window labels)."
        },
        {
          "name": "formatter",
          "type": "string",
          "description": "The formatter string used to derive the `startTime` and `endTime` from the start timestamp and the end timestamp respectively."
        },
        {
          "name": "action",
          "type": "string",
          "description": "Represents the action performed - scale or translate."
        }
      ]
    }]
  },
  {
    "name": "timeNavBrush",
    "shortDescription": "Triggers on every instance of the window being dragged/squeezed by the user. ",
    "description": "This event is fired on every instance of the window being dragged/squeezed by the user.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-timeNavBrush"
    },
    "tags": {
      "action": "Drag",
      "component": "Time Navigator",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"timeNavBrush\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the brush selection."
        },
        {
          "name": "startText",
          "type": "string",
          "description": "A human readable text representation of the `start` timestamp (as shown in the active window labels)"
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the brush selection."
        },
        {
          "name": "endText",
          "type": "string",
          "description": " A human readable textual representation of the `end` timestamp (as shown in the active window labels)."
        },
        {
          "name": "formatter",
          "type": "string",
          "description": "The formatter string used to derive the `startTime` and `endTime` from the start timestamp and the end timestamp respectively."
        },
        {
          "name": "action",
          "type": "string",
          "description": "Represents the action performed - scale or translate."
        }
      ]
    }]
  },
  {
    "name": "timeNavBrushEnd",
    "shortDescription": "Triggers at the end of the user’s interaction with the time navigator’s window.",
    "description": "This event is fired at the end of the user’s interaction with the time navigator’s window.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-timeNavBrushEnd"
    },
    "tags": {
      "action": "Drag",
      "component": "Time Navigator",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"timeNavBrushEnd\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the brush selection."
        },
        {
          "name": "startText",
          "type": "string",
          "description": "A human readable text representation of the `start` timestamp (as shown in the active window labels)"
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the brush selection."
        },
        {
          "name": "endText",
          "type": "string",
          "description": " A human readable textual representation of the `end` timestamp (as shown in the active window labels)."
        },
        {
          "name": "formatter",
          "type": "string",
          "description": "The formatter string used to derive the `startTime` and `endTime` from the start timestamp and the end timestamp respectively."
        },
        {
          "name": "action",
          "type": "string",
          "description": "Represents the action performed - scale or translate."
        }
      ]
    }]
  },
  {
    "name": "canvasDragStart",
    "shortDescription": "Triggers at the start of the user’s drag interaction with a chart canvas.",
    "description": "This event is fired at the start of the user’s drag interaction with a chart canvas.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-canvasDragStart"
    },
    "tags": {
      "action": "Drag",
      "component": "Canvas",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"canvasDragStart\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the canvas’ time spread."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the canvas’ time spread."
        }
      ]
    }]
  },
  {
    "name": "canvasDrag",
    "shortDescription": "Triggers on every instance of the canvas being dragged by the user.",
    "description": "This event is fired on every instance of the canvas being dragged by the user.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-canvasDrag"
    },
    "tags": {
      "action": "Drag",
      "component": "Canvas",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"canvasDrag\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the canvas’ time spread."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the canvas’ time spread."
        }
      ]
    }]
  },
  {
    "name": "canvasDragEnd",
    "shortDescription": "Triggers at the end of the user’s drag interaction with a chart canvas.",
    "description": "This event is fired at the end of the user’s drag interaction with a chart canvas.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-canvasDragEnd"
    },
    "tags": {
      "action": "Drag",
      "component": "Canvas",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"canvasDragEnd\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the canvas’ time spread."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the canvas’ time spread."
        }
      ]
    }]
  },
  {
    "name": "canvasDblTap",
    "shortDescription": "Triggers after a user’s double tap interaction on a canvas.",
    "description": "This event is fired after a user’s double tap interaction on a canvas.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-canvasDblTap"
    },
    "tags": {
      "action": "Double Click",
      "component": "Canvas",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"canvasDblTap\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the canvas’ time spread."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the canvas’ time spread."
        }
      ]
    }]
  },
  {
    "name": "canvasWheel",
    "shortDescription": "Triggers on every instance of a user’s wheel interaction on a canvas.",
    "description": "This event is fired on every instance of a user’s wheel interaction on a canvas.",
    "example": {
      "header": "Example",
      "slug": "fusiontime-event-canvasWheel"
    },
    "tags": {
      "action": "Wheel",
      "component": "Canvas",
      "lifecycle": ""
    },
    "syntax": "{\r\n\t\"chart\": {\r\n\t\t// ...\r\n\t},\r\n\t\"data\": [\r\n\t\t// ...\r\n\t]\r\n},\r\n\"events\": {\r\n\t\"canvasWheel\": function (ev) {\r\n\t\tconsole.log(ev);\r\n\t}\r\n}",
    "params": [{
      "name": "eventObj",
      "header": "Event Object Parameters",
      "subparams": [{
          "name": "start",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the start of the canvas’ time spread."
        },
        {
          "name": "end",
          "type": "number",
          "description": "The UNIX timestamp corresponding to the end of the canvas’ time spread."
        }
      ]
    }]
  }
]